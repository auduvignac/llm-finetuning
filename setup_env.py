import importlib.util
import importlib.metadata as ilmd
from importlib.metadata import PackageNotFoundError
import os
import platform
import subprocess
import sys
import urllib.request
import re

# Nom de l'environnement (cach√©)
ENV_NAME = ".env"


def run_cmd(cmd, shell=False, check=True):
    """
    Ex√©cute une commande shell en affichant la sortie en direct.
    L√®ve une erreur si le code de retour != 0 lorsque check=True.
    """
    print(" $", " ".join(cmd) if isinstance(cmd, (list, tuple)) else cmd)
    result = subprocess.run(cmd, shell=shell)
    if check and result.returncode != 0:
        sys.exit(
            f"‚ùå Erreur lors de l'ex√©cution de : {' '.join(cmd) if isinstance(cmd, (list, tuple)) else cmd}"
        )


def is_colab() -> bool:
    return "google.colab" in sys.modules


# --- Helpers venv paths ---
def env_python_path(env_name: str) -> str:
    if platform.system() == "Windows":
        return os.path.join(env_name, "Scripts", "python.exe")
    return os.path.join(env_name, "bin", "python")


def env_pip_cmd(env_name: str):
    """
    Retourne la commande (liste) pour invoquer pip du venv de fa√ßon fiable:
    [<python_du_venv>, "-m", "pip", ...]
    """
    return [env_python_path(env_name), "-m", "pip"]


# --- Colab: installer seulement ce qui manque, avec contr√¥le de version strict ---
def _strip_inline_comment(line: str) -> str:
    """
    Retire les commentaires ' # ...' en conservant les URLs contenant '#'
    (on ne retire que si ' #' est pr√©c√©d√© d'un espace).
    """
    return re.split(r"\s+#", line, 1)[0].strip()


def _raw_requirement_line(line: str) -> bool:
    """
    D√©tecte les lignes qui doivent √™tre pass√©es √† pip telles quelles
    (editable, VCS/URL, local path, PEP 508 direct refs avec ' @ ').
    """
    l = line.strip()
    return (
        l.startswith(("-e ", "--editable "))
        or " @ " in l
        or l.startswith(
            ("git+", "http://", "https://", "file:", "svn+", "hg+", "bzr+")
        )
        or l.startswith(
            (
                "-f ",
                "--find-links ",
                "--extra-index-url ",
                "--index-url ",
                "--trusted-host ",
            )
        )
        or l.startswith(
            ("-r ", "--requirement ")
        )  # inclusions: on laisse pip g√©rer
    )


def _ensure_packaging():
    """
    S'assure que 'packaging' est dispo (Colab l'a g√©n√©ralement).
    """
    try:
        import packaging  # noqa: F401
    except Exception:
        run_cmd([sys.executable, "-m", "pip", "install", "packaging"])


def install_requirements_colab(requirements_url: str):
    """
    Installe uniquement les d√©pendances manquantes sur Colab, avec
    v√©rification stricte des versions selon les specifiers PEP 440.
    G√®re aussi les markers PEP 508 et les extras (ex: package[accel]).
    """
    print("‚ö° Ex√©cution sur Colab : v√©rification stricte des d√©pendances‚Ä¶")
    _ensure_packaging()
    from packaging.requirements import Requirement
    from packaging.specifiers import SpecifierSet

    with urllib.request.urlopen(requirements_url) as resp:
        requirements = resp.read().decode("utf-8").splitlines()

    to_install = []
    for raw in requirements:
        raw = raw.strip()
        if not raw or raw.startswith("#"):
            continue

        # Lignes "brutes" (URL/VCS/editable/options/-r) -> on les laisse √† pip
        if _raw_requirement_line(raw):
            print(f"‚Ü™Ô∏é Ajout (sp√©cial) : {raw}")
            to_install.append(raw)
            continue

        line = _strip_inline_comment(raw)
        if not line:
            continue

        # Parse PEP 508
        try:
            req = Requirement(line)
        except Exception:
            # En cas de parse compliqu√©, on d√©l√®gue √† pip
            print(f"‚Ü™Ô∏é Ajout (non parsable proprement) : {raw}")
            to_install.append(raw)
            continue

        # Respect des markers (python_version, platform, etc.)
        if req.marker and not req.marker.evaluate():
            print(f"‚è≠Ô∏è  Ignore (marker non satisfait) : {req}")
            continue

        dist_name = req.name  # nom de distribution normalis√©
        try:
            installed_ver = ilmd.version(dist_name)
        except PackageNotFoundError:
            print(f"‚¨áÔ∏è Manquant : {raw}")
            to_install.append(raw)
            continue

        # V√©rif stricte de la version si specifier pr√©sent
        spec_ok = True
        if req.specifier:  # type: SpecifierSet
            spec_ok = req.specifier.contains(installed_ver, prereleases=True)

        if spec_ok:
            print(f"‚úÖ {dist_name} {installed_ver} ‚Äî OK")
        else:
            print(
                f"üîÅ {dist_name} {installed_ver} ne satisfait pas '{req.specifier}' ‚Üí r√©installation : {raw}"
            )
            to_install.append(raw)

    if to_install:
        print("‚¨áÔ∏è Installation/r√©ininstallation des paquets n√©cessaires‚Ä¶")
        for pkg in to_install:
            run_cmd([sys.executable, "-m", "pip", "install", pkg])
    else:
        print("‚úÖ Toutes les d√©pendances satisfont les contraintes.")


# --- Local: cr√©ation et installation dans le venv .env ---
def setup_local_env(
    env_name: str = ENV_NAME, requirements: str = "requirements.txt"
):
    """
    Cr√©e un venv local (par d√©faut .env), met pip √† jour,
    puis installe requirements.txt si pr√©sent.
    """
    if os.path.isdir(env_name):
        print(f"‚ÑπÔ∏è L'environnement '{env_name}' existe d√©j√†, on continue.")
    else:
        print(f"üì¶ Cr√©ation de l'environnement virtuel : {env_name}‚Ä¶")
        run_cmd([sys.executable, "-m", "venv", env_name])
    py_path = env_python_path(env_name)
    if not os.path.isfile(py_path):
        sys.exit(f"‚ùå Python du venv introuvable √† : {py_path}")

    pip_cmd = env_pip_cmd(env_name)

    print("‚¨áÔ∏è Mise √† jour de pip‚Ä¶")
    run_cmd([*pip_cmd, "install", "--upgrade", "pip"])

    if os.path.isfile(requirements):
        print(f"‚¨áÔ∏è Installation des d√©pendances depuis {requirements}‚Ä¶")
        run_cmd([*pip_cmd, "install", "-r", requirements])
    else:
        print(f"‚ö†Ô∏è Fichier {requirements} introuvable ‚Äî √©tape ignor√©e.")

    print("\n‚úÖ Environnement pr√™t ! Pour l'activer :\n")
    if platform.system() == "Windows":
        print(f"   PowerShell : .\\{env_name}\\Scripts\\Activate.ps1")
        print(f"   CMD       : {env_name}\\Scripts\\activate.bat")
    else:
        print(f"   Bash/zsh  : source {env_name}/bin/activate")


def main():
    if is_colab():
        # Mode Colab
        requirements_url = (
            "https://raw.githubusercontent.com/auduvignac/llm-finetuning/refs/"
            "heads/main/requirements.txt"
        )
        install_requirements_colab(requirements_url)
    else:
        # Mode local
        setup_local_env()


if __name__ == "__main__":
    main()
